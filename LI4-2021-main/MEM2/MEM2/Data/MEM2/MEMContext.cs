// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace MEM2.Data.MEM2
{
    public partial class MEMContext : DbContext
    {
        public MEMContext()
        {
        }

        public MEMContext(DbContextOptions<MEMContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUserTokens> AspNetUserTokens { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<Evento> Evento { get; set; }
        public virtual DbSet<Gostos> Gostos { get; set; }
        public virtual DbSet<Notificacao> Notificacao { get; set; }
        public virtual DbSet<Seguidos> Seguidos { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<AspNetRoleClaims>(entity =>
            {
                entity.HasIndex(e => e.RoleId, "IX_AspNetRoleClaims_RoleId");

                entity.Property(e => e.RoleId).IsRequired();

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetRoleClaims)
                    .HasForeignKey(d => d.RoleId);
            });

            modelBuilder.Entity<AspNetRoles>(entity =>
            {
                entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedName] IS NOT NULL)");

                entity.Property(e => e.Name).HasMaxLength(256);

                entity.Property(e => e.NormalizedName).HasMaxLength(256);
            });

            modelBuilder.Entity<AspNetUserClaims>(entity =>
            {
                entity.HasIndex(e => e.UserId, "IX_AspNetUserClaims_UserId");

                entity.Property(e => e.UserId).IsRequired();

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserClaims)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserLogins>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

                entity.HasIndex(e => e.UserId, "IX_AspNetUserLogins_UserId");

                entity.Property(e => e.LoginProvider).HasMaxLength(128);

                entity.Property(e => e.ProviderKey).HasMaxLength(128);

                entity.Property(e => e.UserId).IsRequired();

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserLogins)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserRoles>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId });

                entity.HasIndex(e => e.RoleId, "IX_AspNetUserRoles_RoleId");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.RoleId);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserTokens>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });

                entity.Property(e => e.LoginProvider).HasMaxLength(128);

                entity.Property(e => e.Name).HasMaxLength(128);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserTokens)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUsers>(entity =>
            {
                entity.HasIndex(e => e.NormalizedEmail, "EmailIndex");

                entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedUserName] IS NOT NULL)");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.NormalizedEmail).HasMaxLength(256);

                entity.Property(e => e.NormalizedUserName).HasMaxLength(256);

                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<Evento>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Categoria)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Descricao)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Fim).HasColumnType("datetime");

                entity.Property(e => e.Inicio).HasColumnType("datetime");

                entity.Property(e => e.Titulo)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Gostos>(entity =>
            {
                entity.HasKey(e => e.PkGostos)
                    .HasName("PK__Gostos__524AC2BFBA4274D2");

                entity.Property(e => e.PkGostos)
                    .ValueGeneratedNever()
                    .HasColumnName("pk_Gostos");

                entity.Property(e => e.FkUtilizadorId)
                    .HasMaxLength(450)
                    .HasColumnName("fk_Utilizador_id");

                entity.Property(e => e.Gostos1)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Gostos");

                entity.HasOne(d => d.FkUtilizador)
                    .WithMany(p => p.Gostos)
                    .HasForeignKey(d => d.FkUtilizadorId)
                    .HasConstraintName("FK__Gostos__fk_Utili__5CD6CB2B");
            });

            modelBuilder.Entity<Notificacao>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.FkEventoId).HasColumnName("fk_Evento_Id");

                entity.Property(e => e.FkUtilizadorId)
                    .HasMaxLength(450)
                    .HasColumnName("fk_Utilizador_id");

                entity.Property(e => e.Hora).HasColumnType("date");

                entity.HasOne(d => d.FkEvento)
                    .WithMany(p => p.Notificacao)
                    .HasForeignKey(d => d.FkEventoId)
                    .HasConstraintName("FK__Notificac__fk_Ev__03F0984C");

                entity.HasOne(d => d.FkUtilizador)
                    .WithMany(p => p.Notificacao)
                    .HasForeignKey(d => d.FkUtilizadorId)
                    .HasConstraintName("FK__Notificac__fk_Ut__02FC7413");
            });

            modelBuilder.Entity<Seguidos>(entity =>
            {
                entity.Property(e => e.SeguidosId)
                    .ValueGeneratedNever()
                    .HasColumnName("Seguidos_id");

                entity.Property(e => e.FkEventoId).HasColumnName("fk_Evento_Id");

                entity.Property(e => e.FkUtilizadorId)
                    .HasMaxLength(450)
                    .HasColumnName("fk_Utilizador_id");

                entity.HasOne(d => d.FkEvento)
                    .WithMany(p => p.Seguidos)
                    .HasForeignKey(d => d.FkEventoId)
                    .HasConstraintName("FK__Seguidos__fk_Eve__70DDC3D8");

                entity.HasOne(d => d.FkUtilizador)
                    .WithMany(p => p.Seguidos)
                    .HasForeignKey(d => d.FkUtilizadorId)
                    .HasConstraintName("FK__Seguidos__fk_Uti__6FE99F9F");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}